#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("express-server:server");
const fs = require("fs");
const http = require("node:http");
const https = require("node:https");

const port =
  process.env.HTTPS === "true"
    ? normalizePort(process.env.HTTPS_PORT)
    : normalizePort(process.env.HTTP_PORT);

let server = null;

if (process.env.HTTPS === "true") {
  // SSL证书配置
  const credentials = {
    key: fs.readFileSync(process.env.SSL_KEY_PATH),
    cert: fs.readFileSync(process.env.SSL_CERT_PATH),
  };

  server = https.createServer(credentials, app);
} else {
  server = http.createServer(app);
}

server.listen(port);
server.on("error", onError.bind(null, port));
server.on("listening", onListening.bind(null, server));

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(port, error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
