#!/usr/bin/env node

const app = require("../app");
const debug = require("debug")("express-server:server");
const fs = require("fs");
const http = require("node:http");
const https = require("node:https");

const httpPort = normalizePort(process.env.HTTP_PORT || "8080");
const httpsPort = normalizePort(process.env.HTTPS_PORT || "443");

// 创建 HTTPS 服务器
if (process.env.HTTPS === "true") {
  // SSL证书配置
  const credentials = {
    key: fs.readFileSync(process.env.SSL_KEY_PATH),
    cert: fs.readFileSync(process.env.SSL_CERT_PATH),
  };

  const httpsServer = https.createServer(credentials, app);
  httpsServer.listen(httpsPort);
  httpsServer.on("error", onError.bind(null, httpsPort));
  httpsServer.on("listening", onListening.bind(null, httpsServer));
}

// 创建 HTTP 服务器 (用于重定向)
const httpApp =
  process.env.HTTPS === "true"
    ? (req, res) => {
        const host = req.headers.host.startsWith("www.")
          ? req.headers.host.slice(4)
          : req.headers.host;

        res.writeHead(301, {
          Location: `https://${host}${req.url}`,
        });
        res.end();
      }
    : app;
const httpServer = http.createServer(httpApp);
httpServer.listen(httpPort);
httpServer.on("error", onError.bind(null, httpPort));
httpServer.on("listening", onListening.bind(null, httpServer));

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

function onError(port, error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening(server) {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
